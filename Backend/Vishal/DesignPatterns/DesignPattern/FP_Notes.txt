The Factory Method Pattern is a creational design pattern that provides an interface for creating objects but allows subclasses 
to alter the type of objects that will be created. This pattern helps to achieve loose coupling by adhering to the Dependency 
Inversion Principle, where the high-level module should not depend on low-level modules, but both should depend on abstractions.

Key Points of the Factory Method Pattern:
Defines an interface for creating an object.
Subclasses decide which class to instantiate.
Promotes loose coupling.

Benefits:
Encapsulation: Object creation logic is encapsulated in factory classes, not spread throughout the code.
Extensibility: Adding new document types is straightforward. Just create a new concrete class and a corresponding factory.
Loose Coupling: The client code is decoupled from the specific types of objects it needs to create.
The Factory Method Pattern is widely used in frameworks where the framework itself controls the object 
creation process. This makes it easier to introduce new classes in the system without altering the core logic.

Example:
Let's consider a scenario where you're creating different types of vehicles (e.g., Car, Bike)
and you want to decide which type of vehicle to create at runtime.

Summary of Key Points:
Vehicle (Abstract Class):

This is the base class (Vehicle) for all product types (e.g., Car, Bike).
The Drive() method is declared as abstract and implemented differently by each concrete product.
Car and Bike (Concrete Classes):

Both Car and Bike inherit from Vehicle and provide their specific implementations of the Drive() method.
VehicleFactory (Factory Class):

The factory class (VehicleFactory) contains the logic for creating different types of vehicles.
The GetVehicle() method takes a string input and returns the appropriate subclass instance (Car or Bike).
Client Code:

The client (in the Main() method) calls the factory’s GetVehicle() method to create instances of different vehicle types based on user input or logic.
If an invalid vehicle type is passed, an exception is thrown.


##To add another vehicle to the Factory Pattern, you simply follow these steps:

Create a new class for the new vehicle type, inheriting from the Vehicle abstract class.

Implement the Drive() method in the new vehicle class.

Update the VehicleFactory to handle the new vehicle type by adding another case in the switch statement.